<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.atguigu.mybatis.dao.EmployeeMapper">
    <!--
    namespace:名称空间;指定为接口的全类名，实现配置文件和接口的动态绑定
    id:唯一标识
    resultType:返回值类型
    #{id}：从传递过来的参数中取出id值

    EmployeeMapper中的方法和id绑定
     public Employee getEmpById(Integer id);

     select标签是接口EmployeeMapper中getEmpById方法的实现
    -->

    <select id="getEmpById" resultType="com.atguigu.mybatis.bean.Employee">
        select * from tbl_employee where id = #{id}
    </select>
    <!--public void addEmp(Employee employee);
            parameterType，参数类型，可省略
        获取自增主键的值：
            mysql支持自增主键，自增主键值的获取，Mybatis也是利用statement.getGenreatedKeys();
            useGeneratedKeys="true";使用自增主键获取主键值策略
            keyProperty:指定对应的主键属性，也就是mybatis获取到主键值以后，将这个值封装给javabean的哪个属性

            没有useGeneratedKeys="true" keyProperty="id"  测试增加时就获取不到id的值，会获取到null

            databaseId="mysql";  mysql是在mybatis-config.xml里起的厂商别名
    -->
    <insert id="addEmp" parameterType="emp" useGeneratedKeys="true" keyProperty="id" databaseId="mysql">
        insert into tbl_employee(last_name,email,gender)
        values(#{lastName},#{email},#{gender})
    </insert>

    <!--  Oracle不支持自增；Oracle使用序列来模拟自增；
          每次插入的数据的主键是从序列中拿到的值；如何获取到这个值
            <insert id="addEmp" databaseId="oracle">
                keyProperty:查出的主键值封装给javabean的哪个属性
                order="BEFORE":当前sql在插入sql之前运行
                      "AFTER":当前sql在插入sql之后运行
                resultType:查出数据的返回类型
                运行顺序：
                        先运行selectKey查询id的sql,查出id值封装给javaBean的id属性
                        再运行插入的sql,就可以取出id属性对应的值
                <selectKey keyProperty="id" order="BEFORE" resultType="Integer">
                    编写查询主键的sql语句
                    select EMPLOYEES_SEQ.nextval from dua1
                </selectKey>
                插入时的主键是从序列中拿到的
                  insert into tbl_employee(EMPLOYEE_ID,LAST_NAME,EMAIL)
                  values(223，#{lastName},#{email})
             </insert>
    -->

    <!--public void updateEmp(Employee employee);-->
    <update id="updateEmp">
        update tbl_employee
        set last_name=#{lastName},email=#{email},gender=#{gender}
        where id=#{id}
    </update>

    <!-- public void deleteEmpById(Integer id);   -->
    <delete id="deleteEmpById">
        delete from tbl_employee where id=#{id}
    </delete>

</mapper>
